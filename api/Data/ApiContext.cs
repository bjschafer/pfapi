#nullable disable
using api.Models.Database;

using Microsoft.EntityFrameworkCore;

namespace api.Data;

public class ApiContext : DbContext
{
    public ApiContext(DbContextOptions<ApiContext> options)
        : base(options)
    {
    }

    public DbSet<Class>      Class      { get; set; }
    public DbSet<Spell>      Spell      { get; set; }
    public DbSet<Descriptor> Descriptor { get; set; }

#region Overrides of DbContext

    /// <inheritdoc />
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<Class>()
                    .HasMany(c => c.Spells)
                    .WithMany(s => s.Classes)
                    .UsingEntity<ClassSpell>(
                         j => j
                             .HasOne(cs => cs.Spell)
                             .WithMany(s => s.ClassSpells)
                             .HasForeignKey(cs => cs.SpellId),
                         j => j
                             .HasOne(cs => cs.Class)
                             .WithMany(c => c.ClassSpells)
                             .HasForeignKey(cs => cs.ClassId),
                         j =>
                             {
                                 j.HasKey(cs => new
                                 {
                                     cs.ClassId,
                                     cs.SpellId,
                                 });
                             });

        // ensure that certain fixed data (like class names) is always seeded into
        // the database. Note that even autogenerated IDs must be set on the objects therein
        var classSeedData = Helpers.GetSeedData<Class>("Class");
        modelBuilder.Entity<Class>()
                    .HasData(classSeedData);
        var descriptorseedData = Helpers.GetSeedData<Descriptor>("Descriptor");
        modelBuilder.Entity<Descriptor>()
                    .HasData(descriptorseedData);
    }

#endregion
}
