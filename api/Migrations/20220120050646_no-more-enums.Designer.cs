// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20220120050646_no-more-enums")]
    partial class nomoreenums
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("api.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adept"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alchemist"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Antipaladin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bard"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bloodrager"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cleric"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Druid"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hunter"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Inquisitor"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Investigator"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Magus"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Mesmerist"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Occultist"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oracle"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Paladin"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Psychic"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ranger"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Shaman"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Scald"
                        },
                        new
                        {
                            Id = 21,
                            Name = "SpellLikeAbility"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Sorcerer"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Spiritualist"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Summoner"
                        },
                        new
                        {
                            Id = 25,
                            Name = "SummonerUnchained"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Witch"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Wizard"
                        });
                });

            modelBuilder.Entity("api.Models.ClassLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpellId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SpellId");

                    b.ToTable("ClassLevel");
                });

            modelBuilder.Entity("api.Models.Descriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpellId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("Descriptor");

                    b.HasData(
                        new
                        {
                            Id = 29,
                            Name = "Acid"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Air"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Chaotic"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Cold"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Curse"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Darkness"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Death"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Disease"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Draconic"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Earth"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Electricity"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Emotion"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Fear"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Fire"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Force"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 46,
                            Name = "LanguageDependent"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Lawful"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Light"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Meditative"
                        },
                        new
                        {
                            Id = 50,
                            Name = "MindAffecting"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Pain"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Poison"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Shadow"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Sonic"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Water"
                        });
                });

            modelBuilder.Entity("api.Models.SourceMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SourceMaterial");
                });

            modelBuilder.Entity("api.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bloodline")
                        .HasColumnType("TEXT");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasCostlyComponents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasDivineFocusComponent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasFocusComponent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasMaterialComponent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSomaticComponent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasVerbalComponent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HauntStatistics")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDismissable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMythic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShapeable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaterialCosts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MythicAugmented")
                        .HasColumnType("TEXT");

                    b.Property<string>("MythicText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patron")
                        .HasColumnType("TEXT");

                    b.Property<string>("Range")
                        .HasColumnType("TEXT");

                    b.Property<string>("SavingThrow")
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpellResistance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subschool")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Targets")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Spell");
                });

            modelBuilder.Entity("api.Models.ClassLevel", b =>
                {
                    b.HasOne("api.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Spell", null)
                        .WithMany("ClassLevels")
                        .HasForeignKey("SpellId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("api.Models.Descriptor", b =>
                {
                    b.HasOne("api.Models.Spell", null)
                        .WithMany("Descriptors")
                        .HasForeignKey("SpellId");
                });

            modelBuilder.Entity("api.Models.Spell", b =>
                {
                    b.HasOne("api.Models.SourceMaterial", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("api.Models.Spell", b =>
                {
                    b.Navigation("ClassLevels");

                    b.Navigation("Descriptors");
                });
#pragma warning restore 612, 618
        }
    }
}
